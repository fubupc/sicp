
(define (make-node item prev next) (list item prev next))
(define (item node) (car node))
(define (prev node) (cadr node))
(define (next node) (caddr node))
(define (no-prev? node) (null? (prev node)))
(define (no-next? node) (null? (next node)))
(define (set-prev node prev) (set-car! (cdr node) prev))
(define (set-next node next) (set-car! (cddr node) next))

(define (make-deque) (cons '() '()))
(define (front-ptr q) (car q))
(define (rear-ptr q) (cdr q))
(define (set-front-ptr! q node) (set-car! q node))
(define (set-rear-ptr! q node) (set-cdr! q node))

(define (empty-deque? q) (null? (front-ptr q)))
(define (front-deque q)
  (if (empty-deque? q)
    (error "empty queue.")
    (item (front-ptr q))))
(define (rear-deque q)
  (if (empty-deque? q)
    (error "empty queue.")
    (item (rear-ptr q))))

(define (front-insert-deque! q item)
  (if (empty-deque? q)
    (let ((node (make-node item '() '())))
      (set-front-ptr! q node)
      (set-rear-ptr! q node))
    (let ((node (make-node item '() (front-ptr q))))
      (set-prev (front-ptr q) node)
      (set-front-ptr! q node))))

(define (rear-insert-deque! q item)
  (if (empty-deque? q)
    (let ((node (make-node item '() '())))
      (set-front-ptr! q node)
      (set-rear-ptr! q node))
    (let ((node (make-node item (rear-ptr q) '())))
      (set-next (rear-ptr q) node)
      (set-rear-ptr! q node))))

(define (front-delete-deque! q)
  (cond ((empty-deque? q) (error "empty deque!"))
        ((no-next? (front-ptr q))
         (set-front-ptr! q '())
         (set-rear-ptr! q '()))
        (else
          (let ((next-node (next (front-ptr q))))
            (set-prev next-node '())
            (set-front-ptr! q next-node)))))

(define (rear-delete-deque! q)
  (cond ((empty-deque? q) (error "empty deque cannot delete."))
        ((no-prev? (rear-ptr q))
         (set-rear-ptr! q '())
         (set-front-ptr! q '()))
        (else
          (let ((prev-node (prev (rear-ptr q))))
            (set-next prev-node '())
            (set-rear-ptr! q prev-node)))))

(define (print-deque q)
  (define (iter node)
    (if (no-next? node)
      (cons (item node) '())
      (cons (item node) (iter (next node)))))

  (if (empty-deque? q)
    '()
    (iter (front-ptr q))))

